<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

	<name>NDG Security+ v3 Scenario</name>
	<author>Jason Zeller</author>
	<author>Michael Stainbrook</author>
	<author>Chris Jacobs</author>

	<description>
		A scenario to compliment the NDG Security+ v3 labs. For more information about the labs please see:
		https://www.netdevgroup.com/content/cybersecurity/labs/ndg_security_plus.html
	</description>

	<type>ctf</type>
	<difficulty>easy</difficulty>

	<system>
		<system_name>ndgsecplus</system_name>
		<base platform="linux" type="server"/>

		<!-- Generate System Accounts -->
		<input into_datastore="accounts">

			<!-- [0]: User 1, Basic Entry account -->
			<generator type="account">
        <input into="leaked_filenames">
          <value/>
        </input>
        <input into="strings_to_leak">
          <value/>
				</input>
        <input into="password">
          <generator type="weak_password_generator"/>
        </input>
      </generator>

			<!-- [1]: User 2, Basic Entry account 2 -->
			<generator type="account">
        <input into="leaked_filenames">
          <value/>
        </input>
        <input into="strings_to_leak">
          <value/>
				</input>
        <input into="password">
          <generator type="strong_password_generator"/>
        </input>
      </generator>

			<!-- [2]: User 3, Superuser account -->
			<generator type="account">
        <input into="leaked_filenames">
          <value/>
        </input>
        <input into="strings_to_leak">
          <value/>
				</input>
        <input into="password">
          <generator type="strong_password_generator"/>
        </input>
				<input into="super_user">
					<value>true</value>
				</input>
      </generator>

		</input>

		<!-- Create users for secret agent users table -->
		<input into_datastore="people">

			<!-- [0]: Basic Entry system account -->
			<generator type="person">
        <input into="account">
          <datastore access="0">accounts</datastore>
        </input>
      </generator>
			<!-- [1]: User 1 -->
			<generator type="person"/>
			<!-- [2]: User 2 -->
			<generator type="person"/>
			<!-- [3]: Basic Entry system account 2-->
			<generator type="person">
        <input into="account">
          <datastore access="1">accounts</datastore>
        </input>
      </generator>
			<!-- [4]: Store User 2 -->
			<generator type="person"/>
			<!-- [5]: Store User 3 -->
			<generator type="person"/>
		</input>

		<!-- Create users for secret agent users table -->
		<input into_datastore="agents">
			<!-- Agent 1 -->
			<generator type="person"/>
			<!-- Agent 2 -->
			<generator type="person"/>
			<!-- Agent 3 (Superuser) -->
			<generator type="person">
        <input into="account">
          <datastore access="2">accounts</datastore>
        </input>
      </generator>
		</input>




		<!-- Online store data -->
		<input into_datastore="store_domain">
      <value>mysterytheory.org</value>
    </input>

		<!-- Use "secretagent" vulnerability to allow SQL injection -->
		<vulnerability module_path=".*secretagent.*">
		  <!-- Use the 'people' database for input into secretagent database -->
			<input into="accounts">
				<datastore>people</datastore>
			</input>
			<input into="domain">
				<datastore>store_domain</datastore>
			</input>
			<input into="agents">
				<datastore>agents</datastore>
			</input>
			<input into="strings_to_leak">
				<generator type="netlab_flag"/>
				<generator type="netlab_flag"/>
				<generator type="netlab_flag"/>
			</input>
		</vulnerability>


		<!-- Use Parameterised Accounts to create system accounts -->
    <utility module_path=".*parameterised_accounts">
      <!-- Use the 'accounts' database -->
			<input into="accounts">
				<datastore access="0">accounts</datastore>
				<datastore access="1">accounts</datastore>
				<datastore access="2">accounts</datastore>
			</input>
    </utility>

		<!-- Generate ncrack_password for use with vulnerability and flag{password} release -->
		<input into_datastore="ncrack_password">
			<generator type="ncrack_password"/>
		</input>

		<!--Use ncrack_crackable_user_account to add account to system -->
    <vulnerability module_path=".*ncrack_user_account.*">
			<input into="password">
				<datastore access="0">ncrack_password</datastore>
			</input>
			<input into="flag_password">
				<generator type="concat_flag_generator">
      		<input into="strings_to_join">
						<datastore access="0">ncrack_password</datastore>
					</input>
				</generator>
			</input>
			<input into="leaked_filenames">
				<value>flag_here</value>
			</input>
			<input into="strings_to_leak">
				<value>So, you think you are an expert huh? I wonder if you can figure out my password.</value>
				<value>This account password is also a flag. For example, if the password is "123456" the flag is: flag{123456}</value>
				<value>Here is a flag for finding this message:</value>
				<generator type="netlab_flag"/>
			</input>
			<input into="account">
				<generator type="account">
					<input into="username">
						<value>guest</value>
					</input>
				</generator>
			</input>
		</vulnerability>

		<!-- Generate jtr_password for use with vulnerability and flag{password} release -->
		<input into_datastore="jtr_password">
			<generator type="jtr_password"/>
		</input>

		<!--Use jtr_crackable_user_account to add account to system -->
    <vulnerability module_path=".*jtr_crackable_user_account.*">
			<input into="password">
				<datastore access="0">jtr_password</datastore>
			</input>
			<input into="flag_password">
				<generator type="concat_flag_generator">
      		<input into="strings_to_join">
						<datastore access="0">jtr_password</datastore>
					</input>
				</generator>
			</input>
			<input into="leaked_filenames">
				<value>flag_here</value>
			</input>
			<input into="strings_to_leak">
				<value>So, you think you are an expert huh? I wonder if you can figure out my password.</value>
				<value>This account password is also a flag. For example, if the password is "123456" the flag is: flag{123456}</value>
				<value>Here is a flag for finding this message:</value>
				<generator type="netlab_flag"/>
			</input>
		</vulnerability>

		<!-- Release pcap file -->
		<vulnerability type="pcap">
			<input into="account">
				<datastore access="2">accounts</datastore>
			</input>
			<input into="leaked_filename">
				<value>suspicious_capture.pcap</value>
			</input>
			<input into="base64_file">
				<generator type="pcap_generator">
					<input into="strings_to_leak">
						<generator type="netlab_flag"/>
					</input>
				</generator>
			</input>
		</vulnerability>

		<!-- Create non-vagrant network -->
		<network module_path=".*private_network_1"/>

		<!-- Cleanup system, and set root password of system -->
		<build type="cleanup">
      <input into="root_password">
        <generator type=".*strong_password.*"/>
      </input>
    </build>

	</system>

</scenario>